github-show-last-release() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo "Usage: github-show-last-release <GITHUB_OWNER/GITHUB_REPO>"
    else
        curl -s https://api.github.com/repos/$1/releases/latest | jq '.assets[].browser_download_url' | sed "s/ /\\n/g"
    fi
}

wg-generate-qr() {
    if [[ $# != 2 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo "Usage: wg-generate-qr </PATH/TO/WG-CLIENT.conf> </PATH/TO/QR.png>"
    else
        qrencode -r $1 -t png --foreground=85004B --size 16 --level H --margin 2 --dpi 300 -o $2
    fi
}

list-ips() {
    ip a show scope global | awk '/^[0-9]+:/ { sub(/:/,"",$2); iface=$2 } /^[[:space:]]*inet / { split($2, a, "/"); print "[\033[96m" iface"\033[0m] "a[1] }'
}

extract() {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2) tar xvjf $1 ;;
            *.tar.gz)  tar xvzf $1 ;;
            *.bz2)     bunzip2 $1 ;;
            *.rar)     unrar x $1 ;;
            *.gz)      gunzip $1 ;;
            *.tar)     tar xvf $1 ;;
            *.tbz2)    tar xvjf $1 ;;
            *.tgz)     tar xvzf $1 ;;
            *.zip)     unzip $1 ;;
            *.Z)      uncompress $1 ;;
            *.7z)      7z x $1 ;;
            *)        echo "Неизвестный формат архива" ;;
        esac
    else
        echo "Файл '$1' не существует"
    fi
}

generate-password() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo "Usage: generate-password <LENGTH>"
    else
        openssl rand -base64 $1
    fi
}

docker-shell() {
    if [[ $# != 1 && $# != 2 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo "Usage: docker-shell <CONTAINER> [SHELL]"
    else
        case "$#" in
            1)
                docker exec -it $1 /bin/bash
                ;;
            2)
                docker exec -it $1 $2
                ;;
        esac
    fi
}

history-view() {
    history | tac | less
}

tracetcp() {
    if [[ $# != 2 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo "Usage: tracetcp <ADDRESS> <PORT>"
    else
        traceroute -T $1 -p $2
    fi
}

tmux-set-box-ip() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo "Usage: tmux-set-box-ip <ADDRESS>"
    else
        STATUS_BACKUP=$(tmux show-option -gv status-left)
        STATUS_LENGTH_BACKUP=$(tmux show-option -gv status-left-length)
        STATUS_IP_COLOR="#[fg=colour16,bg=colour96]"
        tmux set-option -g status-left "$STATUS_BACKUP$STATUS_IP_COLOR BOX: $1 #[fg=default,bg=default] "
        set -g status-left-length $(($STATUS_LENGTH_BACKUP + 21))
    fi
}

ssh-stealth() {
    if [[ $# != 3 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo "Usage: ssh-stealth <USER> <ADDRESS> <COMMAND>"
    else
        ssh $1@$2 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "$3"
    fi
}

conky-reload() {
    if [[ $(pgrep -x conky) ]]; then
        killall conky;
        conky -q -d;
    else
        conky -q -d;
    fi
}
# Либо можно добавить значок Conky на панель задач и изменить команду запуска на:
# bash -c "if [[ $(pgrep -x conky) ]]; then killall conky; conky -q -d; else conky -q -d; fi"
# Не ставя CheckBox "Запускать в терминале"

get-dockerhub-image-versions() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo "Usage: get-dockerhub-image-versions <DOCKERHUB_REPO>"
    else
        local image="$1"
        local namespace
        local repo
        local url
        local response

        if [[ "$image" == *"/"* ]]; then
            namespace=$(cut -d'/' -f1 <<< "$image")
            repo=$(cut -d'/' -f2 <<< "$image")
        else
            namespace="library"
            repo="$image"
        fi

        url="https://registry.hub.docker.com/v2/repositories/${namespace}/${repo}/tags?page_size=100"

        while [ -n "$url" ]; do
            response=$(curl -s "$url")
            echo "$response" | jq -r '.results[].name'
            url=$(echo "$response" | jq -r '.next')
            [[ "$url" == "null" ]] && break
        done
    fi
}

reload_zsh_completion() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo "Usage: reload_zsh_completion <COMMAND>"
    else
        unfunction _$1 && compinit _$1
    fi
}

venv-create() {
    if [[ $# != 0 && $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo "Usage: venv-create [PYTHON_VENV_NAME]"
    else
        case "$#" in
            0)
                python3 -m venv .venv --prompt '(.venv)'
                ;;
            1)
                python3 -m venv $1 --prompt "($1)"
                ;;
        esac
    fi
}

venv-enter () {
    if [[ $# != 0 && $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo "Usage: venv-enter [PYTHON_VENV_NAME]"
    else
        case "$#" in
            0)
                source .venv/bin/activate
                ;;
            1)
                source $1/bin/activate
                ;;
        esac
    fi
}

docker-container-volumes() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo "Usage: docker-container-volumes <CONTAINER>"
    else
        docker container inspect $1 | jq '.[].Mounts.[].Source'
    fi
}