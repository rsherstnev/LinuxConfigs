echo-green() {
    local _GREEN_COLOR="\e[1;32m"
    local _COLOR_RESET="\e[0m"
    echo -e "${_GREEN_COLOR}$1${_COLOR_RESET}"
}

echo-yellow() {
    local _YELLOW_COLOR="\e[1;33m"
    local _COLOR_RESET="\e[0m"
    echo -e "${_YELLOW_COLOR}$1${_COLOR_RESET}"
}

echo-red() {
    local _RED_COLOR="\e[1;31m"
    local _COLOR_RESET="\e[0m"
    echo -e "${_RED_COLOR}$1${_COLOR_RESET}"
}

github-show-latest-release() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: github-show-latest-release <GITHUB_OWNER/GITHUB_REPO>"
    else
        curl -s https://api.github.com/repos/$1/releases/latest | jq '.assets[].browser_download_url' | sed "s/ /\\n/g"
    fi
}

github-download-latest-release() {
    if [[ $# != 2 && $# != 3 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: github-download-latest-release <GITHUB_OWNER/GITHUB_REPO> <FILE-PATTERN> [OUTPUT-DIR]"
        echo-yellow "Example: github-download-latest-release \"DominicBreuker/pspy\" pspy64"
        return 1
    fi

    local repo="$1"
    local pattern="$2"
    local output_dir="${3:-.}"

    if ! command -v jq &> /dev/null; then
        echo-red "[ERROR] Для работы функции необходима утилита \"jq\"!"
        return 1
    fi

    echo-yellow "[INFO] Получаю список файлов в последнем релизе репозитория \"$repo\"..."
    local api_url="https://api.github.com/repos/$repo/releases/latest"
    local response=$(curl -sL "$api_url")

    local download_urls=($(echo "$response" | jq -r --arg pattern "$pattern" '.assets[] | select(.name | contains($pattern)).browser_download_url'))

    if [ ${#download_urls[@]} -eq 0 ]; then
        echo-red "[ERROR] В последнем релизе репозитория не были найдены файлы с паттерном \"$pattern\"!"
        return 1
    fi

    mkdir -p "$output_dir"

    for url in "${download_urls[@]}"; do
        local filename=$(basename "$url")
        echo-yellow "[INFO] Загрузка файла: $filename"
        if command -v wget &> /dev/null; then
            if wget -q --show-progress -O "$output_dir/$filename" "$url"; then
                echo-green "[SUCCESS] Файл "$filename" был успешно загружен в директорию \"$output_dir\"."
            else
                echo-red "[ERROR] При загрузке файла "$filename" в директорию \"$output_dir\" произошла ошибка!"
            fi
        else
            if curl -L -o "$output_dir/$filename" "$url"; then
                echo-green "[SUCCESS] Файл "$filename" был успешно загружен в директорию \"$output_dir\"."
            else
                echo-red "[ERROR] При загрузке файла "$filename" в директорию \"$output_dir\" произошла ошибка!"
            fi
        fi
    done
}

wg-generate-qr() {
    if [[ $# != 2 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: wg-generate-qr </PATH/TO/WG-CLIENT.conf> </PATH/TO/QR.png>"
    else
        qrencode -r $1 -t png --foreground=85004B --size 16 --level H --margin 2 --dpi 300 -o $2
    fi
}

list-ips() {
    ip a show scope global | awk '/^[0-9]+:/ { sub(/:/,"",$2); iface=$2 } /^[[:space:]]*inet / { split($2, a, "/"); print "[\033[96m" iface"\033[0m] "a[1] }'
}

extract() {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2) tar xvjf $1 ;;
            *.tar.gz)  tar xvzf $1 ;;
            *.bz2)     bunzip2 $1 ;;
            *.rar)     unrar x $1 ;;
            *.gz)      gunzip $1 ;;
            *.tar)     tar xvf $1 ;;
            *.tbz2)    tar xvjf $1 ;;
            *.tgz)     tar xvzf $1 ;;
            *.zip)     unzip $1 ;;
            *.Z)      uncompress $1 ;;
            *.7z)      7z x $1 ;;
            *)        echo "Неизвестный формат архива" ;;
        esac
    else
        echo-red "Файл '$1' не существует"
    fi
}

password-generate() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: password-generate <LENGTH>"
    else
        openssl rand -base64 $1
    fi
}

password-strong-generate() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: password-strong-generate <LENGTH>"
    else
        tr -dc 'A-Za-z0-9!@#$%^&*()_+-=<>' </dev/random | head -c "$1"
        echo
    fi
}

docker-shell() {
    if [[ $# != 1 && $# != 2 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: docker-shell <CONTAINER> [SHELL]"
    else
        case "$#" in
            1)
                docker exec -it $1 /bin/bash
                ;;
            2)
                docker exec -it $1 $2
                ;;
        esac
    fi
}

history-view() {
    history | tac | less
}

tracetcp() {
    if [[ $# != 2 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: tracetcp <ADDRESS> <PORT>"
    else
        traceroute -T $1 -p $2
    fi
}

htb-set-box-address() {
    if [[ $# != 0 && $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: htb-set-box-address [ADDRESS]"
    else
        if ! grep -q "^export BOX_ADDRESS=" "$HOME/.zshenv"; then
            echo 'export BOX_ADDRESS=""' >> "$HOME/.zshenv"
        fi
        case "$#" in
            0)
                sed -i "s|^export BOX_ADDRESS=.*|export BOX_ADDRESS=\"\"|" $HOME/.zshenv
                source $HOME/.zshenv
                tmux set-environment -g BOX_ADDRESS "$BOX_ADDRESS"
                ;;
            1)
                sed -i "s|^export BOX_ADDRESS=.*|export BOX_ADDRESS=\"$1\"|" $HOME/.zshenv
                source $HOME/.zshenv
                tmux set-environment -g BOX_ADDRESS "$BOX_ADDRESS"
                ;;
        esac
    fi
}

ssh-stealth() {
    if [[ $# != 3 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: ssh-stealth <USER> <ADDRESS> <COMMAND>"
    else
        ssh $1@$2 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "$3"
    fi
}

conky-reload() {
    if [[ $(pgrep -x conky) ]]; then
        killall conky;
        conky -q -d;
    else
        conky -q -d;
    fi
}
# Либо можно добавить значок Conky на панель задач и изменить команду запуска на:
# bash -c "if [[ $(pgrep -x conky) ]]; then killall conky; conky -q -d; else conky -q -d; fi"
# Не ставя CheckBox "Запускать в терминале"

dockerhub-get-image-versions() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: dockerhub-get-image-versions <DOCKERHUB_REPO>"
    else
        local image="$1"
        local namespace
        local repo
        local url
        local response

        if [[ "$image" == *"/"* ]]; then
            namespace=$(cut -d'/' -f1 <<< "$image")
            repo=$(cut -d'/' -f2 <<< "$image")
        else
            namespace="library"
            repo="$image"
        fi

        url="https://registry.hub.docker.com/v2/repositories/${namespace}/${repo}/tags?page_size=100"

        while [ -n "$url" ]; do
            response=$(curl -s "$url")
            echo "$response" | jq -r '.results[].name'
            url=$(echo "$response" | jq -r '.next')
            [[ "$url" == "null" ]] && break
        done
    fi
}

zsh-completion-reload() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: zsh-completion-reload <COMMAND>"
    else
        unfunction _$1 && compinit _$1
    fi
}

venv-create() {
    if [[ $# != 0 && $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: venv-create [PYTHON_VENV_NAME]"
    else
        case "$#" in
            0)
                python3 -m venv .venv --prompt '(.venv)'
                ;;
            1)
                python3 -m venv $1 --prompt "($1)"
                ;;
        esac
    fi
}

venv-activate () {
    if [[ $# != 0 && $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: venv-activate [PYTHON_VENV_NAME]"
    else
        case "$#" in
            0)
                source .venv/bin/activate
                ;;
            1)
                source $1/bin/activate
                ;;
        esac
    fi
}

docker-container-volumes() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: docker-container-volumes <CONTAINER>"
    else
        docker container inspect $1 | jq -r '.[].Mounts.[].Source'
    fi
}

ipa() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: ipa <IP_ADDRESS>"
    else
        if command -v jq &> /dev/null; then
            curl -s "https://ifconfig.co/json?ip=$1" | jq 'del(.user_agent)'
        else
            curl -s "https://ifconfig.co/json?ip=$1"
        fi
    fi
}

cat-with-no-comments() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: cat-with-no-comments <FILE>"
    else
        grep -v '^[[:space:]]*#' $1 | awk 'NF{print; blank=0} !NF && !blank{print ""; blank=1}'
    fi
}

mkbak() {
    cp "$1" "$1.bak";
}

speedtest-cli() {
    curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python3 -
}

b64encode() {
    if [[ $# == 0 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: b64encode <TEXT>"
    else
        local input="$*"
        printf "%s" "$input" | base64
    fi
}

hoaxshell() {
    uv run --directory /opt/python-software/hoaxshell hoaxshell.py -q "$@"
}

villain() {
    uv run --directory /opt/python-software/villain Villain.py -q "$@"
}

searchnmapscript() {
    uv run --directory /opt/scripts searchnmapscript.py "$@"
}

phpsploit() {
    uv run --directory /opt/python-software/phpsploit ./phpsploit "$@"
}

nxc-test-passwords() {
    if [[ $# != 3 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: nxc-test-passwords <HOST> <LOGIN> <PASSWORD>"
    else
        for proto in smb ldap wmi winrm rdp mssql nfs ssh ftp vnc; do
            nxc $proto $1 -u "$2" -p "$3" 2&>/dev/null
        done
    fi
}

nxc-test-hashes() {
    if [[ $# != 3 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo "Usage: nxc-test-hashes <HOST> <LOGIN> <HASH>"
    else
        for proto in smb ldap wmi winrm rdp mssql nfs ssh ftp vnc; do
            nxc $proto $1 -u "$2" -H "$3" 2&>/dev/null
        done
    fi
}

nmap-scan-tcp-ports() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: nmap-scan-tcp-ports <ADDRESS>"
    else
        local target="$1"

        echo-yellow "[*] Быстрое сканирование $target..."
        local ports=$(nmap -sS -n -Pn --min-rate 500 --open "$target" | awk '/^[0-9]+\/tcp/ && $2 == "open" { split($1, a, "/"); print a[1] }' | paste -sd, -)

        if [[ -n "$ports" ]]; then
            echo-green "[*] Открытые порты: $ports"
            echo-yellow "[*] Запуск подробного сканирования..."
            nmap -sC -sV -n -vvv -Pn -p "$ports" "$target" -oN nmap.tcp.ports
        else
            echo-red "[!] Открытых портов не найдено"
        fi
    fi
}

nmap-scan-tcp-all-ports() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: nmap-scan-tcp-all-ports <ADDRESS>"
    else
        local target="$1"

        echo-yellow "[*] Быстрое сканирование $target..."
        local ports=$(nmap -sS -n -p- -Pn --min-rate 500 --open "$target" | awk '/^[0-9]+\/tcp/ && $2 == "open" { split($1, a, "/"); print a[1] }' | paste -sd, -)

        if [[ -n "$ports" ]]; then
            echo-green "[*] Открытые порты: $ports"
            echo-yellow "[*] Запуск подробного сканирования..."
            nmap -sC -sV -n -vvv -Pn -p "$ports" "$target" -oN nmap.tcp.allports
        else
            echo-red "[!] Открытых портов не найдено"
        fi
    fi
}

nmap-scan-udp-main-ports() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: nmap-scan-udp-main-ports <ADDRESS>"
    else
        local target="$1"
        local main_udp_ports=(53 67 69 80 123 137 138 161 162 500 514 520 623 631 1434 1645 1701 1812 1900 2049 4500 5060 5353 5678 11211)
        local port_list=$(IFS=, ; echo "${main_udp_ports[*]}")

        echo-yellow "[*] Быстрое сканирование $target..."
        local ports=$(nmap -sU -n -p $port_list -Pn "$target" | awk '/^[0-9]+\/udp/ && $2 == "open" { split($1, a, "/"); print a[1] }' | paste -sd,)

        if [[ -n "$ports" ]]; then
            echo-green "[*] Открытые порты: $ports"
            echo-yellow "[*] Запуск подробного сканирования..."
            nmap -sU -sC -sV -n -vvv -Pn -p "$ports" "$target" -oN nmap.udp.mainports
        else
            echo-red "[!] Открытых портов не найдено"
        fi
    fi
}

rustscan-tcp-ports() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: rustscan-tcp-ports <ADDRESS>"
    else
        command rustscan --no-banner --scan-order random --ulimit 5000 -a "$1" -- -sC -sV -n -Pn -oN rustscan.tcp.ports
    fi
}

rustscan-tcp-all-ports() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: rustscan-tcp-all-ports <ADDRESS>"
    else
        command rustscan --no-banner --scan-order random --ulimit 5000 -r 1-65535 -a "$1" -- -sC -sV -n -Pn -oN rustscan.tcp.allports
    fi
}

hashid-file() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: hashid-file <FILE>"
    else
        haiti -e - < "$1"
    fi
}

which-packet() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: which-packet <TOOL>"
    else
        dpkg -S $(which $1)
    fi
}

http-server() {
    if [[ $# != 0 && $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: http-server [PORT]"
    else
        echo-green "IP адреса машины:"
        list-ips
        echo

        echo-green "Содержимое директории:"
        ls -a
        echo
        
        case "$#" in
            0)
                python3 -m http.server
                ;;
            1)
                python3 -m http.server $1
                ;;
        esac
    fi
}

smb-server() {
    if [[ $# != 0 && $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: smb-server [SHARE-NAME]"
    else
        case "$#" in
            0)
                local share_name="share"
                ;;
            1)
                local share_name="$1"
                ;;
        esac
        

        echo-green "IP адреса машины:"
        list-ips
        echo

        echo-green "Имя шары:"
        echo $share_name
        echo

        echo-green "Содержимое директории:"
        ls -a
        echo
        
        case "$#" in
            0)
                impacket-smbserver -smb2support share .
                ;;
            1)
                impacket-smbserver -smb2support "$1" .
                ;;
        esac
    fi
}

ftp-server() {
    if [[ $# != 0 && $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: ftp-server [PORT]"
    else
        echo-green "IP адреса машины:"
        list-ips
        echo

        echo-green "Содержимое директории:"
        ls -a
        echo

        case "$#" in
            0)
                python3 -m pyftpdlib -p 21
                ;;
            1)
                python3 -m pyftpdlib -p "$1"
                ;;
        esac 
    fi
}

tftp-server() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: tftp-server <INTERFACE>"
    else
        echo-green "IP адреса машины:"
        list-ips
        echo

        echo-green "Содержимое директории:"
        ls -a
        echo

        ptftpd -p 69 "$1" .
    fi
}

git-grep() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: git-grep <PATTERN>"
    else
        local pattern="$1"
        local red=$'\033[31m' green=$'\033[32m' blue=$'\033[34m' reset=$'\033[0m'

        git rev-list --all | while read -r commit; do
            git --no-pager grep "$pattern" "$commit" | while IFS=: read -r file line text; do
                text="${text#"${text%%[![:space:]]*}"}"
                highlighted_text=$(echo "$text" | sed -E "s/($pattern)/${red}\1${reset}/gI")
                printf "%s%s%s:%s%s%s:%s\n" "$blue" "$file" "$reset" "$green" "$line" "$reset" "$highlighted_text"
            done
        done | column -t -s ":"
    fi
}

http-simple-test() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: http-simple-test <SITE-URL>"
    else
        local base_url="$1"

        local pages=(
            "robots.txt"
            "sitemap.xml"
            ".gitignore"
            ".env"
            ".htpasswd"
            ".htaccess"
            ".git/"
            ".svn/"
            "admin/"
            "signup/"
            "login/"
            "user/"
            "register/"
            "upload/"
            "files/upload/"
            "media/upload/"
            "config/"
            "setup/"
            "api/"
            "backup/"
            "backups/"
            "old/"
            "cgi-bin/"
        )

        if ! command -v curl > /dev/null; then
            echo-red "[FAIL] Для работы функции необходима утилита \"curl\", но она не была найдена!"
            return 1
        fi

        for page in "${pages[@]}"; do
            full_url="${base_url}/${page}"
            http_code=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$full_url")

            case "$http_code" in
                200)
                    echo-green "[$http_code] $full_url"
                    ;;
                404)
                    echo-red "[$http_code] $full_url"
                    ;;
                *)
                    echo-yellow "[$http_code] $full_url"
                    ;;
            esac
        done
    fi
}

openssl-certinfo() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: openssl-certinfo <CERT>"
    else
        openssl x509 -in "$1" -noout -text
    fi
}

burp-proxy() {
    if ! command -v proxychains &> /dev/null; then
        echo-red "Для работы функции необходим proxychains, но он не был найден!"
        return 1
    fi

    if [ $# -eq 0 ]; then
        echo-yellow "Usage: burp-proxy <COMMAND> [ARGUMENTS...]"
        return 1
    fi

    if [ ! -f "$HOME/.proxychains_burp" ]; then
        cat > $HOME/.proxychains_burp <<EOF
strict_chain
proxy_dns
[ProxyList]
http 127.0.0.1 8080
EOF
    fi

    proxychains4 -q -f "$HOME/.proxychains_burp" "$@"
}

# Чисто вайб-кодинг
get-link-local-ipv6-by-mac() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: get-link-local-ipv6-by-mac <MAC-ADDRESS>"
    else
        mac=$(echo "$1" | tr '[:upper:]' '[:lower:]' | tr '-' ':')

        if ! echo "$mac" | grep -Eq '^([0-9a-f]{2}:){5}[0-9a-f]{2}$'; then
            echo-red "Неверный MAC-адрес!"
            echo-red "MAC-адрес должен быть в формате XX:XX:XX:XX:XX:XX или XX-XX-XX-XX-XX-XX"
            return 1
        fi

        IFS=':' read -r o1 o2 o3 o4 o5 o6 <<< "$mac"

        dec=$(( 0x$o1 ))
        dec=$(( dec ^ 0x02 ))
        o1_mod=$(printf "%02x" $dec)
        printf 'fe80::%s%02s:%s%02s:%s%02s:%s%02s\n' "${o1_mod}" "${o2}" "${o3}" "ff" "fe" "${o4}" "${o5}" "${o6}"
    fi
}

https-cert-download() {
    if [[ $# -lt 1 || $# -gt 3 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: https-cert-download <ADDRESS> [PORT] [FILE]"
    else
        local host=$1
        local port=${2:-443}
        local output_file=${3:-"${host}.crt"}

        openssl s_client -connect "${host}:${port}" </dev/null 2>/dev/null | openssl x509 -outform PEM > $output_file

        if [[ -s "$output_file" ]]; then
            echo-green "Сертификат сайта https://$host:$port сохранен в файл $output_file"
        else
            echo-red "При загрузке сертификата сайта https://$host:$port в файл $output_file произошла ошибка!"
            return 2
        fi
    fi
}

copy-file-to-clipboard() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: copy-file-to-clipboard <FILE>"
    elif ! [[ -f "$1" ]]; then
        echo-red "Ошибка! Файл \"$1\" не найден!"
    else
        if command -v xclip &>/dev/null; then
            xclip -selection clipboard < "$1"
        elif command -v xsel &>/dev/null; then
            xsel --clipboard < "$1"
        else
            echo-red "Ошибка! Утилиты \"xclip\" и \"xsel\" не были найдены"
            return 1
        fi
        echo-green "Файл \"$1\" был скопирован в буфер обмена"
    fi
}

bloodhound() {
    if [[ $# != 1 || "$1" == "-h" || "$1" == "--help" ]]; then
        echo-yellow "Usage: bloodhound <start | stop>"
    else
        local BLOODHOUND_COMPOSE_FILE="/opt/docker-compose/bloodhound-ce/bloodhound-ce.yml"
        local BLOODHOUND_COMPOSE_NAME="bloodhound-ce"
        case "$1" in
            start)
                docker compose -f $BLOODHOUND_COMPOSE_FILE -p $BLOODHOUND_COMPOSE_NAME start
                ;;
            stop)
                docker compose -f $BLOODHOUND_COMPOSE_FILE -p $BLOODHOUND_COMPOSE_NAME stop
                ;;
            *)
                echo-yellow "Usage: bloodhound <start | stop>"
                ;;
        esac
    fi
}